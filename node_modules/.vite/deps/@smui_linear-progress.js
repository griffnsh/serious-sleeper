import "./chunk-UYG2TSGU.js";
import {
  MDCLinearProgressFoundation
} from "./chunk-OTVXQFK2.js";
import "./chunk-TCBN2E7P.js";
import {
  classMap,
  forwardEventsBuilder,
  useActions
} from "./chunk-7JGAO77Z.js";
import "./chunk-6A2TAOKG.js";
import {
  SvelteComponentDev,
  action_destroyer,
  add_location,
  append_hydration_dev,
  assign,
  attr_dev,
  binding_callbacks,
  children,
  claim_element,
  claim_space,
  component_subscribe,
  compute_rest_props,
  detach_dev,
  dispatch_dev,
  element,
  exclude_internal_props,
  getContext,
  get_current_component,
  get_spread_update,
  init,
  insert_hydration_dev,
  is_function,
  listen_dev,
  noop,
  onMount,
  run_all,
  safe_not_equal,
  set_attributes,
  set_store_value,
  space,
  validate_slots,
  validate_store
} from "./chunk-F3NZ3QLJ.js";
import "./chunk-SSYGV25P.js";

// node_modules/@smui/linear-progress/dist/LinearProgress.svelte
var file = "node_modules/@smui/linear-progress/dist/LinearProgress.svelte";
function create_fragment(ctx) {
  let div5;
  let div2;
  let div0;
  let div0_style_value;
  let t0;
  let div1;
  let t1;
  let div3;
  let span0;
  let div3_style_value;
  let t2;
  let div4;
  let span1;
  let div5_class_value;
  let div5_style_value;
  let div5_aria_valuemin_value;
  let div5_aria_valuemax_value;
  let div5_aria_valuenow_value;
  let useActions_action;
  let forwardEvents_action;
  let mounted;
  let dispose;
  let div5_levels = [
    {
      class: div5_class_value = classMap({
        [
          /*className*/
          ctx[1]
        ]: true,
        "mdc-linear-progress": true,
        "mdc-linear-progress--indeterminate": (
          /*indeterminate*/
          ctx[3]
        ),
        "mdc-linear-progress--closed": (
          /*closed*/
          ctx[4]
        ),
        "mdc-data-table__linear-progress": (
          /*context*/
          ctx[14] === "data-table"
        ),
        .../*internalClasses*/
        ctx[8]
      })
    },
    {
      style: div5_style_value = Object.entries(
        /*internalStyles*/
        ctx[10]
      ).map(func_2).concat([
        /*style*/
        ctx[2]
      ]).join(" ")
    },
    { role: "progressbar" },
    {
      "aria-valuemin": div5_aria_valuemin_value = 0
    },
    {
      "aria-valuemax": div5_aria_valuemax_value = 1
    },
    {
      "aria-valuenow": div5_aria_valuenow_value = /*indeterminate*/
      ctx[3] ? void 0 : (
        /*progress*/
        ctx[5]
      )
    },
    /*internalAttrs*/
    ctx[9],
    /*$$restProps*/
    ctx[16]
  ];
  let div_data_5 = {};
  for (let i = 0; i < div5_levels.length; i += 1) {
    div_data_5 = assign(div_data_5, div5_levels[i]);
  }
  const block = {
    c: function create() {
      div5 = element("div");
      div2 = element("div");
      div0 = element("div");
      t0 = space();
      div1 = element("div");
      t1 = space();
      div3 = element("div");
      span0 = element("span");
      t2 = space();
      div4 = element("div");
      span1 = element("span");
      this.h();
    },
    l: function claim(nodes) {
      div5 = claim_element(nodes, "DIV", {
        class: true,
        style: true,
        role: true,
        "aria-valuemin": true,
        "aria-valuemax": true,
        "aria-valuenow": true
      });
      var div5_nodes = children(div5);
      div2 = claim_element(div5_nodes, "DIV", { class: true });
      var div2_nodes = children(div2);
      div0 = claim_element(div2_nodes, "DIV", { class: true, style: true });
      children(div0).forEach(detach_dev);
      t0 = claim_space(div2_nodes);
      div1 = claim_element(div2_nodes, "DIV", { class: true });
      children(div1).forEach(detach_dev);
      div2_nodes.forEach(detach_dev);
      t1 = claim_space(div5_nodes);
      div3 = claim_element(div5_nodes, "DIV", { class: true, style: true });
      var div3_nodes = children(div3);
      span0 = claim_element(div3_nodes, "SPAN", { class: true });
      children(span0).forEach(detach_dev);
      div3_nodes.forEach(detach_dev);
      t2 = claim_space(div5_nodes);
      div4 = claim_element(div5_nodes, "DIV", { class: true });
      var div4_nodes = children(div4);
      span1 = claim_element(div4_nodes, "SPAN", { class: true });
      children(span1).forEach(detach_dev);
      div4_nodes.forEach(detach_dev);
      div5_nodes.forEach(detach_dev);
      this.h();
    },
    h: function hydrate() {
      attr_dev(div0, "class", "mdc-linear-progress__buffer-bar");
      attr_dev(div0, "style", div0_style_value = Object.entries(
        /*bufferBarStyles*/
        ctx[11]
      ).map(func).join(" "));
      add_location(div0, file, 25, 4, 744);
      attr_dev(div1, "class", "mdc-linear-progress__buffer-dots");
      add_location(div1, file, 31, 4, 925);
      attr_dev(div2, "class", "mdc-linear-progress__buffer");
      add_location(div2, file, 24, 2, 698);
      attr_dev(span0, "class", "mdc-linear-progress__bar-inner");
      add_location(span0, file, 39, 4, 1182);
      attr_dev(div3, "class", "mdc-linear-progress__bar mdc-linear-progress__primary-bar");
      attr_dev(div3, "style", div3_style_value = Object.entries(
        /*primaryBarStyles*/
        ctx[12]
      ).map(func_1).join(" "));
      add_location(div3, file, 33, 2, 985);
      attr_dev(span1, "class", "mdc-linear-progress__bar-inner");
      add_location(span1, file, 42, 4, 1319);
      attr_dev(div4, "class", "mdc-linear-progress__bar mdc-linear-progress__secondary-bar");
      add_location(div4, file, 41, 2, 1241);
      set_attributes(div5, div_data_5);
      add_location(div5, file, 0, 0, 0);
    },
    m: function mount(target, anchor) {
      insert_hydration_dev(target, div5, anchor);
      append_hydration_dev(div5, div2);
      append_hydration_dev(div2, div0);
      append_hydration_dev(div2, t0);
      append_hydration_dev(div2, div1);
      append_hydration_dev(div5, t1);
      append_hydration_dev(div5, div3);
      append_hydration_dev(div3, span0);
      append_hydration_dev(div5, t2);
      append_hydration_dev(div5, div4);
      append_hydration_dev(div4, span1);
      ctx[19](div5);
      if (!mounted) {
        dispose = [
          action_destroyer(useActions_action = useActions.call(
            null,
            div5,
            /*use*/
            ctx[0]
          )),
          action_destroyer(forwardEvents_action = /*forwardEvents*/
          ctx[13].call(null, div5)),
          listen_dev(
            div5,
            "transitionend",
            /*transitionend_handler*/
            ctx[20],
            false,
            false,
            false,
            false
          )
        ];
        mounted = true;
      }
    },
    p: function update(ctx2, [dirty]) {
      if (dirty & /*bufferBarStyles*/
      2048 && div0_style_value !== (div0_style_value = Object.entries(
        /*bufferBarStyles*/
        ctx2[11]
      ).map(func).join(" "))) {
        attr_dev(div0, "style", div0_style_value);
      }
      if (dirty & /*primaryBarStyles*/
      4096 && div3_style_value !== (div3_style_value = Object.entries(
        /*primaryBarStyles*/
        ctx2[12]
      ).map(func_1).join(" "))) {
        attr_dev(div3, "style", div3_style_value);
      }
      set_attributes(div5, div_data_5 = get_spread_update(div5_levels, [
        dirty & /*className, indeterminate, closed, internalClasses*/
        282 && div5_class_value !== (div5_class_value = classMap({
          [
            /*className*/
            ctx2[1]
          ]: true,
          "mdc-linear-progress": true,
          "mdc-linear-progress--indeterminate": (
            /*indeterminate*/
            ctx2[3]
          ),
          "mdc-linear-progress--closed": (
            /*closed*/
            ctx2[4]
          ),
          "mdc-data-table__linear-progress": (
            /*context*/
            ctx2[14] === "data-table"
          ),
          .../*internalClasses*/
          ctx2[8]
        })) && { class: div5_class_value },
        dirty & /*internalStyles, style*/
        1028 && div5_style_value !== (div5_style_value = Object.entries(
          /*internalStyles*/
          ctx2[10]
        ).map(func_2).concat([
          /*style*/
          ctx2[2]
        ]).join(" ")) && { style: div5_style_value },
        { role: "progressbar" },
        {
          "aria-valuemin": div5_aria_valuemin_value
        },
        {
          "aria-valuemax": div5_aria_valuemax_value
        },
        dirty & /*indeterminate, progress*/
        40 && div5_aria_valuenow_value !== (div5_aria_valuenow_value = /*indeterminate*/
        ctx2[3] ? void 0 : (
          /*progress*/
          ctx2[5]
        )) && {
          "aria-valuenow": div5_aria_valuenow_value
        },
        dirty & /*internalAttrs*/
        512 && /*internalAttrs*/
        ctx2[9],
        dirty & /*$$restProps*/
        65536 && /*$$restProps*/
        ctx2[16]
      ]));
      if (useActions_action && is_function(useActions_action.update) && dirty & /*use*/
      1)
        useActions_action.update.call(
          null,
          /*use*/
          ctx2[0]
        );
    },
    i: noop,
    o: noop,
    d: function destroy(detaching) {
      if (detaching)
        detach_dev(div5);
      ctx[19](null);
      mounted = false;
      run_all(dispose);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_fragment.name,
    type: "component",
    source: "",
    ctx
  });
  return block;
}
var func = ([name, value]) => `${name}: ${value};`;
var func_1 = ([name, value]) => `${name}: ${value};`;
var func_2 = ([name, value]) => `${name}: ${value};`;
function instance_1($$self, $$props, $$invalidate) {
  const omit_props_names = [
    "use",
    "class",
    "style",
    "indeterminate",
    "closed",
    "progress",
    "buffer",
    "getElement"
  ];
  let $$restProps = compute_rest_props($$props, omit_props_names);
  let $closedStore;
  let { $$slots: slots = {}, $$scope } = $$props;
  validate_slots("LinearProgress", slots, []);
  const forwardEvents = forwardEventsBuilder(get_current_component());
  let { use = [] } = $$props;
  let { class: className = "" } = $$props;
  let { style = "" } = $$props;
  let { indeterminate = false } = $$props;
  let { closed = false } = $$props;
  let { progress = 0 } = $$props;
  let { buffer = void 0 } = $$props;
  let element2;
  let instance;
  let internalClasses = {};
  let internalAttrs = {};
  let internalStyles = {};
  let bufferBarStyles = {};
  let primaryBarStyles = {};
  let context = getContext("SMUI:linear-progress:context");
  let closedStore = getContext("SMUI:linear-progress:closed");
  validate_store(closedStore, "closedStore");
  component_subscribe($$self, closedStore, (value) => $$invalidate(21, $closedStore = value));
  onMount(() => {
    $$invalidate(6, instance = new MDCLinearProgressFoundation({
      addClass,
      forceLayout: () => {
        getElement().getBoundingClientRect();
      },
      setBufferBarStyle: addBufferBarStyle,
      setPrimaryBarStyle: addPrimaryBarStyle,
      hasClass,
      removeAttribute: removeAttr,
      removeClass,
      setAttribute: addAttr,
      setStyle: addStyle,
      attachResizeObserver: (callback) => {
        const RO = window.ResizeObserver;
        if (RO) {
          const ro = new RO(callback);
          ro.observe(getElement());
          return ro;
        }
        return null;
      },
      getWidth: () => getElement().offsetWidth
    }));
    instance.init();
    return () => {
      instance.destroy();
    };
  });
  function hasClass(className2) {
    return className2 in internalClasses ? internalClasses[className2] : getElement().classList.contains(className2);
  }
  function addClass(className2) {
    if (!internalClasses[className2]) {
      $$invalidate(8, internalClasses[className2] = true, internalClasses);
    }
  }
  function removeClass(className2) {
    if (!(className2 in internalClasses) || internalClasses[className2]) {
      $$invalidate(8, internalClasses[className2] = false, internalClasses);
    }
  }
  function addAttr(name, value) {
    if (internalAttrs[name] !== value) {
      $$invalidate(9, internalAttrs[name] = value, internalAttrs);
    }
  }
  function removeAttr(name) {
    if (!(name in internalAttrs) || internalAttrs[name] != null) {
      $$invalidate(9, internalAttrs[name] = void 0, internalAttrs);
    }
  }
  function addStyle(name, value) {
    if (internalStyles[name] != value) {
      if (value === "" || value == null) {
        delete internalStyles[name];
        $$invalidate(10, internalStyles);
      } else {
        $$invalidate(10, internalStyles[name] = value, internalStyles);
      }
    }
  }
  function addBufferBarStyle(name, value) {
    if (bufferBarStyles[name] != value) {
      if (value === "" || value == null) {
        delete bufferBarStyles[name];
        $$invalidate(11, bufferBarStyles);
      } else {
        $$invalidate(11, bufferBarStyles[name] = value, bufferBarStyles);
      }
    }
  }
  function addPrimaryBarStyle(name, value) {
    if (primaryBarStyles[name] != value) {
      if (value === "" || value == null) {
        delete primaryBarStyles[name];
        $$invalidate(12, primaryBarStyles);
      } else {
        $$invalidate(12, primaryBarStyles[name] = value, primaryBarStyles);
      }
    }
  }
  function getElement() {
    return element2;
  }
  function div5_binding($$value) {
    binding_callbacks[$$value ? "unshift" : "push"](() => {
      element2 = $$value;
      $$invalidate(7, element2);
    });
  }
  const transitionend_handler = () => instance && instance.handleTransitionEnd();
  $$self.$$set = ($$new_props) => {
    $$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
    $$invalidate(16, $$restProps = compute_rest_props($$props, omit_props_names));
    if ("use" in $$new_props)
      $$invalidate(0, use = $$new_props.use);
    if ("class" in $$new_props)
      $$invalidate(1, className = $$new_props.class);
    if ("style" in $$new_props)
      $$invalidate(2, style = $$new_props.style);
    if ("indeterminate" in $$new_props)
      $$invalidate(3, indeterminate = $$new_props.indeterminate);
    if ("closed" in $$new_props)
      $$invalidate(4, closed = $$new_props.closed);
    if ("progress" in $$new_props)
      $$invalidate(5, progress = $$new_props.progress);
    if ("buffer" in $$new_props)
      $$invalidate(17, buffer = $$new_props.buffer);
  };
  $$self.$capture_state = () => ({
    MDCLinearProgressFoundation,
    onMount,
    getContext,
    get_current_component,
    forwardEventsBuilder,
    classMap,
    useActions,
    forwardEvents,
    use,
    className,
    style,
    indeterminate,
    closed,
    progress,
    buffer,
    element: element2,
    instance,
    internalClasses,
    internalAttrs,
    internalStyles,
    bufferBarStyles,
    primaryBarStyles,
    context,
    closedStore,
    hasClass,
    addClass,
    removeClass,
    addAttr,
    removeAttr,
    addStyle,
    addBufferBarStyle,
    addPrimaryBarStyle,
    getElement,
    $closedStore
  });
  $$self.$inject_state = ($$new_props) => {
    if ("use" in $$props)
      $$invalidate(0, use = $$new_props.use);
    if ("className" in $$props)
      $$invalidate(1, className = $$new_props.className);
    if ("style" in $$props)
      $$invalidate(2, style = $$new_props.style);
    if ("indeterminate" in $$props)
      $$invalidate(3, indeterminate = $$new_props.indeterminate);
    if ("closed" in $$props)
      $$invalidate(4, closed = $$new_props.closed);
    if ("progress" in $$props)
      $$invalidate(5, progress = $$new_props.progress);
    if ("buffer" in $$props)
      $$invalidate(17, buffer = $$new_props.buffer);
    if ("element" in $$props)
      $$invalidate(7, element2 = $$new_props.element);
    if ("instance" in $$props)
      $$invalidate(6, instance = $$new_props.instance);
    if ("internalClasses" in $$props)
      $$invalidate(8, internalClasses = $$new_props.internalClasses);
    if ("internalAttrs" in $$props)
      $$invalidate(9, internalAttrs = $$new_props.internalAttrs);
    if ("internalStyles" in $$props)
      $$invalidate(10, internalStyles = $$new_props.internalStyles);
    if ("bufferBarStyles" in $$props)
      $$invalidate(11, bufferBarStyles = $$new_props.bufferBarStyles);
    if ("primaryBarStyles" in $$props)
      $$invalidate(12, primaryBarStyles = $$new_props.primaryBarStyles);
    if ("context" in $$props)
      $$invalidate(14, context = $$new_props.context);
    if ("closedStore" in $$props)
      $$invalidate(15, closedStore = $$new_props.closedStore);
  };
  if ($$props && "$$inject" in $$props) {
    $$self.$inject_state($$props.$$inject);
  }
  $$self.$$.update = () => {
    if ($$self.$$.dirty & /*closed*/
    16) {
      $:
        if (closedStore) {
          set_store_value(closedStore, $closedStore = closed, $closedStore);
        }
    }
    if ($$self.$$.dirty & /*instance, indeterminate*/
    72) {
      $:
        if (instance && instance.isDeterminate() !== !indeterminate) {
          instance.setDeterminate(!indeterminate);
        }
    }
    if ($$self.$$.dirty & /*instance, progress*/
    96) {
      $:
        if (instance && instance.getProgress() !== progress) {
          instance.setProgress(progress);
        }
    }
    if ($$self.$$.dirty & /*instance, buffer*/
    131136) {
      $:
        if (instance) {
          if (buffer == null) {
            instance.setBuffer(1);
          } else {
            instance.setBuffer(buffer);
          }
        }
    }
    if ($$self.$$.dirty & /*instance, closed*/
    80) {
      $:
        if (instance) {
          if (closed) {
            instance.close();
          } else {
            instance.open();
          }
        }
    }
  };
  return [
    use,
    className,
    style,
    indeterminate,
    closed,
    progress,
    instance,
    element2,
    internalClasses,
    internalAttrs,
    internalStyles,
    bufferBarStyles,
    primaryBarStyles,
    forwardEvents,
    context,
    closedStore,
    $$restProps,
    buffer,
    getElement,
    div5_binding,
    transitionend_handler
  ];
}
var LinearProgress = class extends SvelteComponentDev {
  constructor(options) {
    super(options);
    init(this, options, instance_1, create_fragment, safe_not_equal, {
      use: 0,
      class: 1,
      style: 2,
      indeterminate: 3,
      closed: 4,
      progress: 5,
      buffer: 17,
      getElement: 18
    });
    dispatch_dev("SvelteRegisterComponent", {
      component: this,
      tagName: "LinearProgress",
      options,
      id: create_fragment.name
    });
  }
  get use() {
    throw new Error("<LinearProgress>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set use(value) {
    throw new Error("<LinearProgress>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get class() {
    throw new Error("<LinearProgress>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set class(value) {
    throw new Error("<LinearProgress>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get style() {
    throw new Error("<LinearProgress>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set style(value) {
    throw new Error("<LinearProgress>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get indeterminate() {
    throw new Error("<LinearProgress>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set indeterminate(value) {
    throw new Error("<LinearProgress>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get closed() {
    throw new Error("<LinearProgress>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set closed(value) {
    throw new Error("<LinearProgress>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get progress() {
    throw new Error("<LinearProgress>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set progress(value) {
    throw new Error("<LinearProgress>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get buffer() {
    throw new Error("<LinearProgress>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set buffer(value) {
    throw new Error("<LinearProgress>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get getElement() {
    return this.$$.ctx[18];
  }
  set getElement(value) {
    throw new Error("<LinearProgress>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
};
var LinearProgress_default = LinearProgress;

// node_modules/@smui/linear-progress/dist/index.js
var dist_default = LinearProgress_default;
export {
  dist_default as default
};
//# sourceMappingURL=@smui_linear-progress.js.map
