import{a as B}from"./leagueTeamManagers.c0fc25fc.js";import{w as R,G as _,H as k,I as W,r as L,l as G,R as y}from"./records.35358e58.js";import{g as Y}from"./nflState.5273b638.js";import{g as H}from"./leagueRosters.51b8caa5.js";import{af as S}from"./index.78a9f0bb.js";import{g as O}from"./leagueBrackets.dc679042.js";import{b as T}from"./leagueTransactions.e77c8e11.js";const E=async(c=!1)=>{if(S(_).leagueWeekHighs)return S(_);if(!c&&T){let t=await JSON.parse(localStorage.getItem("records"));if(t&&t.playoffData)return t.stale=!0,t}const s=await Y().catch(t=>{console.error(t)});let e=0;s.season_type=="regular"?e=s.week-1:s.season_type=="post"&&(e=18);let n=G,f,p,i=new y,a=new y;for(;n&&n!=0;){const[t,u]=await R(H(n),B(n)).catch(l=>{console.error(l)}),w=t.rosters;(u.status=="complete"||e>u.settings.playoff_week_start-1)&&(e=99);const{season:D,year:h}=await $({leagueData:u,rosters:w,curSeason:n,week:e,regularSeason:i}),d=await z({year:h,curSeason:n,week:e,playoffRecords:a,rosters:w});d&&(a=d),p=h,!f&&h&&(f=h),n=D}a.currentYear=i.currentYear,a.lastYear=i.lastYear,i.finalizeAllTimeRecords({currentYear:f,lastYear:p}),a.finalizeAllTimeRecords({currentYear:f,lastYear:p});const g=i.returnRecords(),r=a.returnRecords(),o={regularSeasonData:g,playoffData:r};return localStorage.setItem("records",JSON.stringify(o)),_.update(()=>o),o},$=async({rosters:c,leagueData:s,curSeason:e,week:n,regularSeason:f})=>{let p=parseInt(s.season);(s.status=="complete"||n>s.settings.playoff_week_start-1)&&(n=s.settings.playoff_week_start-1);for(const l in c)v({year:p,roster:c[l],regularSeason:f});const i=[];let a=parseInt(n);for(;n>0;)i.push(fetch(`https://api.sleeper.app/v1/league/${e}/matchups/${n}`,{compress:!0})),n--;const g=await R(...i).catch(l=>{console.error(l)}),r=[];for(const l of g){const m=l.json();r.push(m),l.ok||console.error(m)}const o=await R(...r).catch(l=>{console.error(l)});e=s.previous_league_id;let t=[],u=[];for(const l of o){const{sPR:m,mD:I,sW:P}=M({matchupWeek:l,seasonPointsRecord:t,record:f,startWeek:a,matchupDifferentials:u,year:p});t=m,u=I,a=P}const[w,D]=k(u,"differential"),[h,d]=k(t,"fpts");return f.addAllTimeMatchupDifferentials(u),h.length>0?f.addSeasonWeekRecord({year:p,biggestBlowouts:w,closestMatchups:D,seasonPointsLows:d,seasonPointsHighs:h}):p=null,{season:e,year:p}},v=({year:c,roster:s,regularSeason:e})=>{const n=s.roster_id,f=W(s);if(s.settings.wins==0&&s.settings.ties==0&&s.settings.losses==0)return;const p=s.settings.fpts+s.settings.fpts_decimal/100,i=L(p/(s.settings.wins+s.settings.losses+s.settings.ties)),a={wins:s.settings.wins,losses:s.settings.losses,ties:s.settings.ties,fptsFor:p,fptsAgainst:s.settings.fpts_against+s.settings.fpts_against_decimal/100,fptsPerGame:i,potentialPoints:s.settings.ppts+s.settings.ppts_decimal/100,rosterID:n,year:c};e.updateManagerRecord(f,a),e.addSeasonLongPoints({rosterID:n,fpts:p,fptsPerGame:i,year:c})},M=({matchupWeek:c,seasonPointsRecord:s,record:e,startWeek:n,matchupDifferentials:f,year:p})=>{let i={},a={};for(const g of c){const r=g.roster_id;if(!r)continue;let o=g.matchup_id;if(!o){a[r]||(a[r]={wins:0,losses:0,ties:0,fptsFor:0,fptsAgainst:0,potentialPoints:0,fptspg:0,pOGames:0,byes:0}),a[r].pOGames=1;const u=g.m;if(!u){a[r].byes=1;continue}o=`PS:${u}`}const t={rosterID:r,fpts:g.points,week:n,year:p};i[o]||(i[o]=[]),i[o].push(t),e.addLeagueWeekRecord(t),s.push(t)}n--;for(const g in i){const r=i[g];let o=r[0],t=r[1];if(!t||!o)continue;o.fpts<t.fpts&&(o=r[1],t=r[0]);const u={year:o.year,week:o.week,home:{rosterID:o.rosterID,fpts:o.fpts},away:{rosterID:t.rosterID,fpts:t.fpts},differential:o.fpts-t.fpts};f.push(u),g.split(":")[0]=="PS"&&(a[o.rosterID].wins=1,a[o.rosterID].fptsFor=o.fpts,a[o.rosterID].fptsAgainst=t.fpts,a[t.rosterID].losses=1,a[t.rosterID].fptsFor=t.fpts,a[t.rosterID].fptsAgainst=o.fpts)}return{sPR:s,mD:f,sW:n,pSD:a}},z=async({curSeason:c,playoffRecords:s,year:e,week:n,rosters:f})=>{const{playoffsStart:p,playoffRounds:i,champs:a}=await O(c);if(n<=p||!e)return null;let g=[],r=[],o={};const t=A({bracket:a.bracket,playoffsStart:p,matchupDifferentials:r,postSeasonData:o,playoffRecords:s,playoffRounds:i,consolation:!1,seasonPointsRecord:g,year:e});o=t.postSeasonData,g=t.seasonPointsRecord,s=t.playoffRecords,r=t.matchupDifferentials;const u=A({bracket:a.consolations,playoffsStart:p,matchupDifferentials:r,postSeasonData:o,playoffRecords:s,playoffRounds:i,consolation:!0,seasonPointsRecord:g,year:e});o=u.postSeasonData,g=u.seasonPointsRecord,s=u.playoffRecords,r=u.matchupDifferentials;for(const l in o){const m=o[l],I=L(m.fptsFor/(m.wins+m.losses+m.ties));m.fptsPerGame=I,m.year=e,m.rosterID=l,s.addSeasonLongPoints({fpts:m.fptsFor,fptsPerGame:I,year:e,rosterID:l});const P=W(f[l]);s.updateManagerRecord(P,m)}const[w,D]=k(r,"differential"),[h,d]=k(g,"fpts");return s.addAllTimeMatchupDifferentials(r),h.length>0&&s.addSeasonWeekRecord({year:e,biggestBlowouts:w,closestMatchups:D,seasonPointsLows:d,seasonPointsHighs:h}),s},A=({bracket:c,playoffRecords:s,playoffRounds:e,matchupDifferentials:n,postSeasonData:f,consolation:p,seasonPointsRecord:i,playoffsStart:a,year:g})=>{for(let r=0;r<c.length;r++){const o=J(r+(e-c.length),e,p,a),t=[];for(let h of c[r]){p&&h.flat();for(const d of h)if(d.r){const l={...d};let m=0;for(const I in l.points)m+=l.points[I].reduce((P,b)=>P+b,0);l.points=m,t.push(l)}}const{sPR:u,mD:w,pSD:D}=M({matchupWeek:t,seasonPointsRecord:i,record:s,startWeek:o,matchupDifferentials:n,year:g});f=F(f,D),f=F(f,D),i=u,n=w}return{postSeasonData:f,seasonPointsRecord:i,playoffRecords:s,matchupDifferentials:n}},F=(c,s)=>{for(const e in s){if(!c[e]){c[e]=s[e];continue}for(const n in s[e])n!="manager"&&(c[e][n]+=s[e][n])}return c},J=(c,s,e,n)=>{if(e)return`(C) Week ${n+c}`;switch(s-c){case 1:return"Finals";case 2:return"Semi-Finals";case 3:return"Quarter-Finals";default:return"Qualifiers"}};export{E as g};
