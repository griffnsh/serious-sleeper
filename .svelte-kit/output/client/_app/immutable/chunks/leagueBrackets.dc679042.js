import{a as S}from"./leagueTeamManagers.c0fc25fc.js";import{w as F,l as R,J as A}from"./records.35358e58.js";import{g as j}from"./leagueRosters.51b8caa5.js";import{af as x}from"./index.78a9f0bb.js";const D=async(s=R)=>{if(x(A).champs&&s==R)return x(A);const[p,i]=await F(j(s),S(s)).catch(t=>{console.error(t)}),u=Object.keys(p.rosters).length,h=[fetch(`https://api.sleeper.app/v1/league/${s}/winners_bracket`,{compress:!0}),fetch(`https://api.sleeper.app/v1/league/${s}/losers_bracket`,{compress:!0})];let o;const m=parseInt(i.season),_=parseInt(i.settings.playoff_week_start);m>2019?o=parseInt(i.settings.playoff_round_type):o=0,m==2020&&o==1&&o++;for(let t=_;t<19;t++)h.push(fetch(`https://api.sleeper.app/v1/league/${s}/matchups/${t}`,{compress:!0}));const l=await F(...h).catch(t=>{console.error(t)}),n=[];for(const t of l)n.push(t.json());const c=await F(...n).catch(t=>{console.error(t)}),a=c.shift(),r=c.shift(),w=a[a.length-1].r,d=r[r.length-1].r,e=O(a,w,c,o);let b=O(r,d,c,o);const M={numRosters:u,playoffsStart:_,playoffRounds:w,loserRounds:d,champs:e,losers:b};return s==R&&A.update(()=>M),M},O=(s,p,i,u)=>{let h=[],o=[],m=[],_=[],l={};for(let n=1;n<=p;n++){const c=s.filter(t=>t.r==n),a=[],r=[];let w=!0;const d=[];let e=[];for(const t of c){if(!t.t1_from&&t.t2_from||!l[t.t1]&&l[t.t2]){let g=$({playoffBracket:t,playoffMatchups:i,i:n-2,consolationMs:m,fromWs:_,playoffType:u,teamsSeen:l});g.bye=!0,g[0].m=null,g[1].m=null,g[0].r--,g[1].r--,g[1].roster_id=null,w?(h[n-2].unshift(g),w=!1):h[n-2].push(g)}l[t.t1]=t.m,l[t.t2]=t.m;const f=$({playoffBracket:t,playoffMatchups:i,i:n-1,consolationMs:m,fromWs:_,playoffType:u,teamsSeen:l});f[0].winners&&e.push(f[0].m),f[0].consolation?(d.push(f[0].m),r.push(f)):a.push(f)}h.push(a);for(const t of o)for(const f of r)f[0].winners&&t[n-2]&&t[n-2]&&f[0].t1From==t[n-2][0][0].m&&(t[n-1]=[f]);const b=r.filter(t=>!t[0].fromWinners&&!t[0].winners),M=r.filter(t=>t[0].fromWinners&&!t[0].winners);b.length&&o.unshift(W(b,p,n)),M.length&&o.push(W(M,p,n)),_=e,m=d}return{bracket:h,consolations:o}},W=(s,p,i)=>{const u=new Array(p).fill([]);return u[i-1]=s,u},$=({playoffBracket:s,playoffMatchups:p,i,consolationMs:u,fromWs:h,playoffType:o,teamsSeen:m})=>{var t,f,g,v;const _=[],l=s.m,n=s.r,c=s.p,a=m[s.t1],r=m[s.t2],w=!!((t=s.t1_from)!=null&&t.w&&((f=s.t2_from)!=null&&f.w)),d=h.indexOf(r||-999)>-1;let e=!1;(c&&c!=1||(g=s.t1_from)!=null&&g.l&&((v=s.t2_from)!=null&&v.l)||u.indexOf(a)>-1||u.indexOf(r)>-1)&&(e=!0);const b=s.t1;_.push(C(b,a,{m:l,r:n,playoffMatchups:p,i,playoffType:o,winners:w,fromWinners:d,consolation:e,p:c}));const M=s.t2;return _.push(C(M,r,{m:l,r:n,playoffMatchups:p,i,playoffType:o,winners:w,fromWinners:d,consolation:e,p:c})),_},C=(s,p,{m:i,r:u,playoffMatchups:h,i:o,playoffType:m,winners:_,fromWinners:l,consolation:n,p:c})=>{let a={roster_id:null,points:void 0,starters:void 0,consolation:n,tFrom:p,m:i,r:u,winners:_,fromWinners:l};if(s){const r=h[o].filter(e=>e.roster_id==s)[0];let w={};w[1]=r==null?void 0:r.starters;const d={};if(d[1]=r==null?void 0:r.starters_points,m==2||c&&c==1&&m==1){const e=h[o+1].filter(b=>b.roster_id==s)[0];w[2]=e==null?void 0:e.starters,d[2]=e==null?void 0:e.starters_points}a.starters=w,a.points=d,a.roster_id=s}return a};export{D as g};
